Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, \nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.
A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.

Example 1:

Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].

class Solution {
public:
    int constrainedSubsetSum(vector<int>& nums, int k) {
        int n = nums.size();
        deque<int> qu;
        vector<int> dp(n);

        for(int i = 0; i < n; i++) {
            if(!qu.empty() && i - qu.front() > k) {
                qu.pop_front();
            }
            dp[i] = (!qu.empty() ? dp[qu.front()] : 0) + nums[i];

            while(!qu.empty() && dp[qu.back()] < dp[i]) {
                qu.pop_back();
            }
            if(dp[i] > 0) {
                qu.push_back(i);
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
};

Constraints:

1 <= k <= nums.length <= 105
-104 <= nums[i] <= 104
